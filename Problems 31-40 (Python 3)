# Problem 31: How many different ways can £2 be made using any number of English coins?

def num_ways(mon): # amount given in hundreds of cents
    coins = [1, 2, 5, 10, 20, 50, 100, 200]
    ways = [1] + [0] * mon

    for i in range(len(coins)):
        for j in range(coins[i], mon + 1):
            ways[j] += ways[j - coins[i]]
    return ways[mon]

num_ways(200)

"""
Problem 32: We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly
once.

Find the sum of all products which has a factorization whose collective digits in multiplier, multiplicand,
product is 1-9 pandigital.

"""

from math import log
from numtheory import digits

# Used in earlier implementation using number and finding factors rather than conversely
#def factor_pairs(n):
#    pairs = []
#    
#    try:
#        for d in range(1, int(sqrt(n)) + 1):
#            if n % d == 0:
#                pairs.extend([[d, n // d]])
#        return pairs
#    except ValueError:
#        pass
    
def isPan(d1, d2):
    try:
        digs = str(d1 * d2) + str(d1) + str(d2)
        digs = digits(int(digs))
        if set(digs) == {1, 2, 3, 4, 5, 6, 7, 8, 9} and len(digs) == 9:
            return True
        else:
            return False
    except ValueError:
        pass
    
# Only need to test one factor 1 digit other 4 or one factor 2 digs other 3, both cases product has 4 digits
def main():
    count = 0
    tmp = []
    for d1 in range(1234, 9876):
        for d2 in range(1, 9):
            if int(log(d1 * d2, 10)) != 3: # 1 dig times 4 dig needs 4 dig product to get 9 digs in all
                continue
            if isPan(d1, d2) and d1 * d2 not in tmp:
                tmp.append(d1 * d2)
                count += d1 * d2
        
    for d1 in range(123, 987):
        for d2 in range(12, 98):
            if int(log(d1 * d2, 10)) != 3: # 2 digit times 3 digit is 5 digits, leaving only 4
                continue
            if isPan(d1, d2) and d1 * d2 not in tmp:
                tmp.append(d1 * d2)
                count += d1 * d2
    return count

main()

"""
Problem 33: 

The fraction 49/98 is a curious fraction, as an inexperienced mathematician in attempting to simplify it may
incorrectly believe that 49/98 = 4/8, which is correct, is obtained by cancelling the 9s.

We call fractions with zero digits at the end or being solely repeated digits to be trivial examples.

There are exactly four such positive, non-trivial fractions less than 1 and containing two digits in the
numerator and denominator.

If the product of these four fractions is given in its lowest common terms, find the value of the denominator.

"""

from numtheory import gcd

digits = {'1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}

def candidates(n):
    n = list(str(n))
    dig1, dig2 = int(n[0]), int(n[1])
    
    return set(list(range(dig1 * 10 + 1, (dig1 + 1) * 10)) + list(range(dig2 * 10 + 1, (dig2 + 1) * 10)))

def reducer(num, den):
    num, den = str(num), str(den)
    if num == den or num == den[::-1]:
        pass
    numdigs, dendigs = list(num), list(den)
    shared = [x for x in numdigs if x in dendigs]
    numdigs = ''.join([x for x in numdigs if x not in shared])
    dendigs = ''.join([x for x in dendigs if x not in shared])
    
    try:
        return digits[numdigs] / digits[dendigs]
    except KeyError:
        pass
    
def main():
    num, den = 1, 1
    for n in range(11, 100):
        for m in range(11, 100):
            if m not in candidates(n) and n not in candidates(m):
                continue
            if m == n or m % 10 == 0 and n % 10 == 0:
                continue
            if m > n:
                tmp = m
                m = n
                n = tmp
            if m / n == reducer(m, n):
                num *= m
                den *= n
    _ = gcd(num, den)
    den = den // _
    return den

main()

# Problem 34: Find the sum of all numbers which are equal to the sum of the factorial of their digits.
# Note: as 1! = 1 and 2! = 2 are not sums they are not included.

from math import factorial, log
from numtheory import digits

# Note sum of factorials of digits a_d, a_{d-1}, ..., a_1 bounded by 9!d and number is at least 10^{d-1}
# So there is no hope if 10^{d-1} > 9!d, which happens at d = 8

factorial_magnitude = [1, 1, 1, 1, 2, 3, 3, 4, 5, 6]
facs = [factorial(x) for x in range(10)]
    
def factorial_sum(n):
    return sum([facs[j] for j in digits(n)])
    
def main():
    count = 0
    for num in range(15, facs[9] * 7):
        digs = digits(num)
        if set(digs) == {0, 1, 2, 3, 4}: # Can be shown with a few base cases that need 5 or more
            continue
        if any([factorial_magnitude[x] > log(num, 10) + 1 for x in digs]):
            continue
        if num == factorial_sum(num):
            count += num
    return count

main()

# Problem 35: How many primes with all circular permutations of digits also prime are there below one million?

from numtheory import SieveOfAtkin, digits
from math import log

def circ_perms(num):
    order = int(log(num, 10))
    index = order
    perms = []
    
    while index > 0:
        tmp = num % 10
        num = 10 ** order * tmp + num // 10
        perms.append(num)
        index -= 1
    return perms

def circulars(limit):
    primes = SieveOfAtkin(limit)
    primes = primes.getPrimes()
    # Cutting down the search space based on bad last digits in some permutation
    bads = {0, 2, 4, 5, 6, 8}
    primes = [p for p in primes if len(set(digits(p)) & bads) == 0 ] # reduces search space from 78498 to 1111
    
    primes = [p for p in primes if all(s in primes for s in circ_perms(p))]
    
    return len(primes) + 2 # Accounts for the numbers 2 and 5 filtered out from before

circulars(10 ** 6)

# Problem 36: Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.

# Note:  leading zeroes are not allowed in either base

from math import log
from numtheory import digits

def max_2(num):
    try:
        return int(log(num, 2))
    except ValueError:
        pass

def base_2(num):
    order = max_2(num)
    digs = [0] * (order + 1)
    
    while num > 0:
        digs[order] = 1
        num -= 2 ** order
        order = max_2(num)
    return digs

def palin_sum(limit):
    result = 0
    
    for s in range(1, limit, 2):
        digs , bdigs = digits(s), base_2(s)
        tmp_dig, tmp_bdig = digs + [], bdigs + [] #stops them from dynamically changing later on with originals
        digs.reverse()
        bdigs.reverse()
        
        if digs == tmp_dig and bdigs == tmp_bdig:
            result += s
    return result

palin_sum(10 ** 6)

"""
Problem 37: The number 3797 has an interesting property. Being prime itself, it is possible to continuously
remove digits from left to right, and remain prime at each stage: 3797, 797, 97, and 7. Similarly we can work
from right to left: 3797, 379, 37, and 3.

Find the sum of the only eleven primes that are both truncatable from left to right and right to left.

Note: 2, 3, 5, and 7 are not considered to be truncatable primes.

"""

# To save on future time, I note that I ran this full tilt and found that the largest prime necessary has 7
# digits. I.e. in case the notebook needs to be rerun for any reason, I don't want it to have to do all those
# sieves again, so I just implement that information into the code.

from numtheory import digits, SieveOfAtkin

def digs_to_sum(digs, limit):
    try:
        total = 0
        for i in range(limit + 1):
            total += digs[i] * 10 ** i
        return total
    except IndexError:
        for i in range(len(digs)):
            digs[i] *= 10 ** i
        return sum(digs)
    
def del_digs(num, k = 1):
    while k > 0:
        num = num // 10
        k -= 1
    return num
    
def condition(num, primes):
    b1 = False
    b2 = False
    
    bad_start = {1, 4, 6, 8, 9}
    bad_middle = {0, 2, 4, 5, 6, 8}
    
    digs = digits(num)
    limit = len(digs)
    
    if len(set(digits(num)[:-2]) & bad_middle) > 0 or digits(num)[-1] in bad_start:
        return False
    
    candidates = [digs_to_sum(digs, i) for i in range(limit)]  #deletes from the left
    if all(s in primes for s in candidates):
        b1 = True

    candidates = [del_digs(num, k) for k in range(1, limit)]  #deletes from the right
    if all(s in primes for s in candidates):
        b2 = True
    
    return b1 and b2

def main():
    count = 0
    total = 0
    order = 2  #Number of digits in primes to be searched
    bad_start = {1, 4, 6, 8, 9}
    bad_middle = {0, 2, 4, 5, 6, 8}
    
    while count < 11:
        primes = SieveOfAtkin(10 ** order).getPrimes()
        for p in primes:
            if p < 10 ** (order - 1):
                continue
            
            if condition(p, primes):
                count += 1
                total += p
        order += 1
    return total

main()

"""
Problem 38: What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated
product of an integer with (1,2, ... , n) where n > 1?

"""

from math import log
from numtheory import digits

def concat(num, lim):
    prods = list(range(1, lim + 1))
    
    for i in range(lim):
        prods[i] *= num
        
    big_num = 0
    
    for i in range(lim):
        order = int(log(prods[i], 10)) + 1
        big_num = big_num * 10 ** order + prods[i]
        
    return big_num

def main():
    
    num = 1
    lim = 5
    M = 0
    
    while lim > 1:
        if (int(log(num, 10)) + 1) * lim > 9:
            lim -= 1
            continue
            
        tmp = concat(num, lim)
        digs = digits(tmp)
        
        if tmp > M and len(digs) == 9 and len(set(digs)) == 9 and 0 not in digs:
            M = concat(num, lim)
            num += 1
        else:
            num += 1
    return M

main()


# Problem 39: For which perimeter p ≤ 1000 are there the most Pythagorean triple triangles with this perimeter?

from numtheory import gcd
from math import sqrt

#k(2m^2 +2mn) = 2km(m+n) all possible ones have this form for some gcd(m,n) = 1, k arbitrary
#Observation:  all perimeters are even length

def primitive(limit): #returns the half perimeters of all primitive triples with perimeter < limit
    result = []
    for m in range(2, int(sqrt(limit / 2))):# since p = 2m(m+n) in primitives, p > 2m^2
        for n in range(1, int((limit - 2 * m ** 2) / (2 * m))):
            if gcd(m, n) != 1 or m * n % 2 != 0 or m < n:
                continue
            result.append(m * (m + n))
        
    return result
                
def generator(lim): #gets all triples' semiperimeters for perimeter limit lim.
    counts = [[x, 0] for x in range(1, lim // 2 + 1)]
    
    for sp in primitive(lim):
        q = lim // (2 * sp)
        for j in range(1, q + 1):
            counts[sp * j - 1][1] += 1
    return [x for x in counts if x[1] > 0]

def max_triples(limit):
    M = 0
    res = 0
    
    for x in generator(limit):
        if x[1] > M:
            M = x[1]
            res = 2 * x[0]
    return res

max_triples(1000)

"""
Problem 40: Consider the real number x = 0.123456789101112131415161718192021.... With dn as the nth digit of x
find the value of d1 × d10 × d100 × d1000 × d10000 × d100000 × d1000000.

"""

# There are 9 nrs with 1 digit, then 90 with 2, 900 with 3 and so on. This means we end in 6 digit numbers as
# 1*9 + 2*90 + ... + 5*90000 = 488,889. Within each block the first digit depends on the value modulo the orders
# relative to powers of 10, et cetera. This can be done by hand, but below is a computer solution.

def main():
    spam = list(range(1, 10 ** 6 - 1))
    spam = [str(x) for x in blah]

    spam = ''.join(spam)
    
    digs = [spam[1], spam[10], spam[100], spam[1000], spam[10000], spam[100000], spam[1000000]]
    digs = [int(x) for x in digs]
    
    res = 1
    
    for x in digs:
        res *= x
        
    return res

main()
